{"mappings":"IA8DAA,EAAe,IA5Df,MACUC,cAAgBC,SAASC,cAAc,QACvCC,YAERC,OAAOC,EAA2B,IAChC,MAAMC,EAASC,KAAKC,QAAQH,GAC5BE,KAAKP,cAAcS,UAAY,GAC/BF,KAAKP,cAAcU,mBAAmB,aAAcJ,GACpDC,KAAKJ,YAAcI,KAAKP,cAAcE,cAAc,sBAGtDS,iBAAiBC,GACfA,IAGFC,kBAAkBD,GAChBL,KAAKP,cAAcc,iBAAiB,UAAWC,IAC7CA,EAAMC,iBACN,MAAMC,EAAY,IAAI,IAAIC,SAASX,KAAKJ,cAClCgB,EAAUC,OAAOC,YAAYJ,GACnCL,EAAQO,MAIZX,QAAQH,GAQN,MAAkB,mxBAoBRA,EAASiB,KA3BEH,GAAgC,2CAEnCA,EAAQI,kCACRJ,EAAQK,mCACRL,EAAQM,qCAuBUC,KAAK,oGCtDtC,MAAMC,EAAiBP,OAAOQ,OAAO,CAC1CC,UAAW,IACXC,aAAc,EACdC,kBAAmB,KCHRC,EAAQZ,OAAOQ,OAAO,CACjCK,oBAAqB,4BACFC,kBAAA,8BACKC,uBAAA,gCCHZ,MAAAC,UAA+BC,MAC3CC,YAAYC,GACVC,MAAMD,ICEV,IAAYE,GAAZ,SAAYA,GACVA,EAAA,kBAAA,uBADF,CAAYA,IAAAA,EAAI,KAeT,MAAMC,EAAe,CAC1BC,YAAaF,EAAKG,kBAClBvC,SAAU,IAGCwC,EAAc,WACzB,MAAMC,EAAUC,aAAaC,QAAQ,YAGrC,OAFIF,IAASJ,EAAMrC,SAAW4C,KAAKC,MAAMJ,IAElCJ,EAAMrC,UAsCbwC,IC7DF,MAAMM,EAAoC,SAAUhC,GAClD,IACE,MAAMiC,EDwBgB,SAAUC,GAClC,GAAIA,EAAW7B,MAAQG,EAAeE,UACpC,MAAM,IAAIO,EAAgBJ,EAAMC,qBAClC,GAAIoB,EAAW5B,SAAWE,EAAeG,aACvC,MAAM,IAAIM,EAAgBJ,EAAMG,wBAClC,GAAIkB,EAAW7B,MAAQG,EAAeI,mBAAsB,EAC1D,MAAM,IAAIK,EAAgBJ,EAAME,mBAElC,MAAM7B,EAAWqC,EAAMrC,SAASiD,QAAOnC,GAAWA,EAAQI,OAAS8B,EAAW9B,OAuB9E,OAtBAmB,EAAMrC,SAAW,IAAIA,EAAUgD,GAE/BX,EAAMrC,SAASkD,MAAK,SAAUC,EAAYC,GACxC,GAAID,EAAEjC,KAAOkC,EAAElC,KAAM,OAAO,EAC5B,GAAIiC,EAAEjC,KAAOkC,EAAElC,KAAM,OAAO,EAE5B,GAAIiC,EAAEjC,OAASkC,EAAElC,KAAM,CACrB,GAAIiC,EAAEhC,MAAQiC,EAAEjC,MAAO,OAAO,EAC9B,GAAIgC,EAAEhC,MAAQiC,EAAEjC,MAAO,OAAO,EAE9B,GAAIgC,EAAEhC,QAAUiC,EAAEjC,MAChB,OAAIgC,EAAE/B,SAAWgC,EAAEhC,UAAiB,EAChC+B,EAAE/B,SAAWgC,EAAEhC,SAAiB,EAC7B,EAGX,MAAM,IAAIY,MAAM,mBAIlBU,aAAaW,QAAQ,WAAYT,KAAKU,UAAUjB,EAAMrC,WAE/CqC,EAAMrC,SCvDIuD,CAAiBzC,GAChCpB,EAAqBK,OAAOgD,GAC5B,MAAOS,GACHA,aAAezB,GAAiB0B,MAAMD,EAAItB,SAC9CwB,QAAQC,IAAIH,KAIVI,EAAgC,WACpC,MAAMb,EAASP,IACf9C,EAAqBK,OAAOgD,IAc5BrD,EAAqBY,iBAAiBsD,GACtClE,EAAqBc,kBAAkBsC,GAZjB,SAAUe,GAChC,GAAQA,IACDzB,EAAKG,kBAIR,MAAMP,MAAM,0BAHZ4B,IAWJE,CAAgB1B,EAAKG","sources":["src/ts/views/productContainerView.ts","src/ts/utils/config.ts","src/ts/utils/message.ts","src/ts/utils/errorValidation.ts","src/ts/model.ts","src/ts/controller.ts"],"sourcesContent":["import { Product } from '../model.js';\n\nclass ProductContainerView {\n  private parentElement = document.querySelector('#app')! as HTMLElement;\n  private formElement!: HTMLFormElement;\n\n  render(products: Array<Product> = []) {\n    const markup = this.getHtml(products);\n    this.parentElement.innerHTML = '';\n    this.parentElement.insertAdjacentHTML('afterbegin', markup);\n    this.formElement = this.parentElement.querySelector('.product-container')! as HTMLFormElement;\n  }\n\n  addHandlerRender(handler: Function) {\n    handler();\n  }\n\n  addHandlerProduct(handler: Function) {\n    this.parentElement.addEventListener('submit', (event: Event) => {\n      event.preventDefault();\n      const dataArray = [...new FormData(this.formElement)];\n      const product = Object.fromEntries(dataArray);\n      handler(product);\n    });\n  }\n\n  getHtml(products: Array<Product>): string {\n    const productHtml = (product: Product) => /* html */ `\n            <tr>\n                <th>${product.name}</th>\n                <th>${product.price}</th>\n                <th>${product.quantity}</th>\n            </tr>`;\n\n    return /* html */ `\n    <h3>상품 추가하기</h3>\n    <form class=\"product-container\">\n        <input type=\"text\" id=\"product-name-input\" name=\"name\" placeholder=\"상품명\" required />\n        <input type=\"number\" id=\"product-price-input\" name=\"price\" placeholder=\"가격\" required />\n        <input type=\"number\" id=\"product-quantity-input\" name=\"quantity\" placeholder=\"수량\" required />\n        <button id=\"product-add-button\">추가하기</button>\n    </form>\n    <table class=\"product-inventory\">\n        <colgroup>\n            <col style=\"width: 140px\" />\n            <col style=\"width: 100px\" />\n            <col style=\"width: 100px\" />\n        </colgroup>\n        <thead>\n            <tr>\n                <th>상품명</th>\n                <th>가격</th>\n                <th>수량</th>\n            </tr>\n            ${products.map(productHtml).join('')}\n        </thead>\n        <tbody id=\"product-inventory-container\"></tbody>\n    </table>\n`;\n  }\n}\n\nexport default new ProductContainerView();\n","export const PRODUCT_CONFIG = Object.freeze({\n  MIN_PRICE: 100,\n  MIN_QUANTITY: 1,\n  SHOULD_BE_DIVIDED: 10\n});\n","export const ERROR = Object.freeze({\n  LESS_THAN_MIN_PRICE: '상품 가격은 최소 100원 이상이어야 합니다!',\n  NOT_DIVIDED_PRICE: '상품 가격은 10원 단위로 나누어 떨어져야합니다!',\n  LESS_THAN_MIN_QUANTITY: '상품 가격은 10원 단위로 나누어 떨어져야합니다!'\n});\n","export default class ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n","import { PRODUCT_CONFIG } from './utils/config.js';\nimport { ERROR } from './utils/message.js';\nimport ValidationError from './utils/errorValidation.js';\n\nexport enum Page {\n  ProductManagement = 'productContainerView'\n}\n\nexport interface Product {\n  name: string;\n  price: number;\n  quantity: number;\n}\n\ninterface State {\n  currentView: Page;\n  products: Array<Product>;\n}\n\nexport const state: State = {\n  currentView: Page.ProductManagement,\n  products: []\n};\n\nexport const loadProduct = function (): Array<Product> {\n  const storage = localStorage.getItem('products');\n  if (storage) state.products = JSON.parse(storage);\n\n  return state.products;\n};\n\nconst sortProduct = function () {\n  state.products.sort(function (a: Product, b: Product): 1 | -1 | 0 {\n    if (a.name < b.name) return 1;\n    if (a.name > b.name) return -1;\n\n    if (a.name === b.name) {\n      if (a.price < b.price) return 1;\n      if (a.price > b.price) return 1;\n\n      if (a.price === b.price) {\n        if (a.quantity < b.quantity) return -1;\n        if (a.quantity > b.quantity) return 1;\n        return 0;\n      }\n    }\n    throw new Error('정렬 할 수 없습니다.');\n  });\n};\n\nconst validateNewProduct = function (newProduct: Product) {\n  if (newProduct.price < PRODUCT_CONFIG.MIN_PRICE)\n    throw new ValidationError(ERROR.LESS_THAN_MIN_PRICE);\n  if (newProduct.quantity < PRODUCT_CONFIG.MIN_QUANTITY)\n    throw new ValidationError(ERROR.LESS_THAN_MIN_QUANTITY);\n  if (newProduct.price % PRODUCT_CONFIG.SHOULD_BE_DIVIDED !== 0)\n    throw new ValidationError(ERROR.NOT_DIVIDED_PRICE);\n};\n\nexport const addProduct = function (newProduct: Product): Array<Product> {\n  validateNewProduct(newProduct);\n\n  const products = state.products.filter(product => product.name !== newProduct.name);\n  state.products = [...products, newProduct];\n\n  sortProduct();\n\n  localStorage.setItem('products', JSON.stringify(state.products));\n\n  return state.products;\n};\n\nconst init = function () {\n  loadProduct();\n};\n\ninit();\n","import productContainerView from './views/productContainerView.js';\nimport * as model from './model.js';\nimport { Product, Page } from './model.js';\nimport ValidationError from './utils/errorValidation.js';\n\nconst controlProductContainerAddProduct = function (product: Product): void {\n  try {\n    const result = model.addProduct(product);\n    productContainerView.render(result);\n  } catch (err) {\n    if (err instanceof ValidationError) alert(err.message);\n    console.log(err);\n  }\n};\n\nconst controlProductContainerRender = function (): void {\n  const result = model.loadProduct();\n  productContainerView.render(result);\n};\n\nconst controlPageView = function (page: Page): void {\n  switch (page) {\n    case Page.ProductManagement:\n      controlProductContainerRender();\n      break;\n    default:\n      throw Error('존재하지 않는 page view 입니다.');\n  }\n};\n\nconst init = () => {\n  productContainerView.addHandlerRender(controlProductContainerRender);\n  productContainerView.addHandlerProduct(controlProductContainerAddProduct);\n\n  controlPageView(Page.ProductManagement);\n};\n\ninit();\n"],"names":["$74704edce1998ab1$export$2e2bcd8739ae039","parentElement","document","querySelector","formElement","render","products","markup","this","getHtml","innerHTML","insertAdjacentHTML","addHandlerRender","handler","addHandlerProduct","addEventListener","event","preventDefault","dataArray","FormData","product","Object","fromEntries","map","name","price","quantity","join","$089ff5f63e0d7276$export$482ddddb92662767","freeze","MIN_PRICE","MIN_QUANTITY","SHOULD_BE_DIVIDED","$24095aff44656d28$export$103bedf43ba882db","LESS_THAN_MIN_PRICE","NOT_DIVIDED_PRICE","LESS_THAN_MIN_QUANTITY","$7bc355ac77e704a4$export$2e2bcd8739ae039","Error","constructor","message","super","$d3b0faf5304f0fd8$export$6955bcca4cd3539f","$d3b0faf5304f0fd8$export$ca000e230c0caa3e","currentView","ProductManagement","$d3b0faf5304f0fd8$export$4099781e1578c9b4","storage","localStorage","getItem","JSON","parse","$4d56e6c70677fbc3$var$controlProductContainerAddProduct","result","newProduct","filter","sort","a","b","setItem","stringify","$d3b0faf5304f0fd8$export$7caf006d7b64ee15","err","alert","console","log","$4d56e6c70677fbc3$var$controlProductContainerRender","page","$4d56e6c70677fbc3$var$controlPageView"],"version":3,"file":"index.b7514986.js.map"}